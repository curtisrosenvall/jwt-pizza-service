name: CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.29
        env:
          MYSQL_ROOT_PASSWORD: theHood1335!
          MYSQL_DATABASE: pizza
          MYSQL_ROOT_HOST: '%'
        ports:
          - '3306:3306'
        options: >-
          --health-cmd="mysqladmin ping -ptheHood1335!"
          --health-interval=20s
          --health-timeout=10s
          --health-retries=10
          --health-start-period=30s
    
    # We'll capture the 'version' output from the "set_version" step, if you want to reuse it later
    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # 1) Set version
      - name: set version
        id: set_version
        run: |
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> "$GITHUB_OUTPUT"
          printf '{"version": "%s"}' "$version" > src/version.json
          echo "Set version to $version"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm ci

      - name: Wait for MySQL
        run: |
          while ! mysql -h"127.0.0.1" -P"3306" -uroot -p"theHood1335!" -e "SELECT 1" >/dev/null 2>&1; do
            echo "Waiting for MySQL to be ready..."
            sleep 2
          done
          echo "MySQL is ready"

      - name: Write config file
        run: |
          echo "module.exports = {
            jwtSecret: '${{ secrets.JWT_SECRET }}',
            db: {
              connection: {
                host: '127.0.0.1',
                user: 'root',
                password: 'theHood1335!',
                database: 'pizza',
                connectTimeout: 60000,
                charset: 'utf8mb4'
              },
              listPerPage: 10,
            },
            factory: {
              url: 'https://pizza-factory.cs329.click',
              apiKey: '${{ secrets.FACTORY_API_KEY }}',
            },
          };" > src/config.js

      - name: Lint
        run: npm run lint

      - name: Run tests (with coverage)
        run: |
          # Optionally wait a bit if needed
          sleep 5
          npm run test:coverage
        env:
          CI: true

      # 2) Post coverage badge
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Update coverage
        if: always()  # so it runs even if tests fail
        run: |
          coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          echo "Coverage is $coverage%"
          color=$(echo "$coverage < 80" | bc | awk '{if ($1) print "red"; else print "green"}')
          curl -s -X POST "https://badge.cs329.click/badge/${{ github.repository_owner }}/jwtpizzaservicecoverage?label=Coverage&value=$coverage%25&color=$color" \
            -H "authorization: bearer ${{ secrets.FACTORY_API_KEY }}"